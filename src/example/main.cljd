(ns example.main
  (:require ["package:flutter/material.dart" :as m]
            [cljd.flutter :as f]))

(defn navigate [navigator ctx target]
  (->
   (m/MaterialPage .child target)
   (.createRoute ctx)
   (#(.push navigator %))))

;; the data store
(def item-store (atom {1 {:name "Jeff"}
                       2 {:name "Jiff"}
                       3 {:name "Joff"}}))

;; the async crud functions
(defn get-item-list-async []
  #_{:clj-kondo/ignore [:unresolved-symbol]}
  (Future.delayed (Duration .seconds 1) (fn [] @item-store)))

(defn get-item-by-id-async [item-id]
  #_{:clj-kondo/ignore [:unresolved-symbol]}
  (Future.delayed (Duration .seconds 1)
                  (fn [] (first (filter (fn [[id _data]] (= id item-id)) @item-store)))))

(defn update-item [id name]
  #_{:clj-kondo/ignore [:unresolved-symbol]}
  (Future.delayed (Duration .seconds 1)
                  (fn [] (swap! item-store update id assoc :name name))))

(defn delete-item [id]
  #_{:clj-kondo/ignore [:unresolved-symbol]}
  (Future.delayed (Duration .seconds 1)
                  (fn []
                    (swap! item-store update dissoc id)
                    (dart:core/print @item-store))))

(def shared-state (atom nil))

;; widgets
(defn item-detail-view [item-id item]
  (f/widget
   :context ctx
   ;;  fetch watch the fetched item
   :managed [name-controller (m/TextEditingController .text (:name item))]
   (m/Scaffold .appBar (m/AppBar .title (m/Text "List View")))
   .body
   (m/Column
    .children
    [(m/ListTile
      .title (m/TextField
              .controller name-controller))
     (m/ListTile
      .title (m/TextButton
              .onPressed (fn []
                           (update-item item-id (.-text name-controller))
                           (swap! shared-state update item-id assoc :name (.-text name-controller))
                           (dart:core/print @shared-state))
              .child (m/Text "Update")))
     (m/ListTile
      .title (m/TextButton
              .onPressed (fn []
                          ;;  delete the item
                           (swap! shared-state dissoc item-id)
                           #_(delete-item item-id)
                           (dart:core/print @shared-state)
                          ;;  navigate back
                           (m/Navigator.pop ctx))
              .child (m/Text "Delete")))])))

;; list view of items
(defn main-view []
  (.then (get-item-list-async) #(reset! shared-state %))
  (f/widget
   :get [m/Navigator]
   :context ctx
     ;;  watch the `item-list` to react to its state
   :watch [watched-item-list shared-state]
   (m/ListView
    .children
    (for [[id {:keys [name] :as item}] watched-item-list]
      (m/ListTile
       .title    (m/Text name)
       .onTap (fn [] (navigate navigator ctx (item-detail-view id item)))
       .trailing (m/Icon m/Icons.navigate_next))))))

;; ignore, only calls widget
(defn main []
  (f/run
   (m/MaterialApp
    .title "Welcome to Flutter"
    .theme (m/ThemeData .primarySwatch m.Colors/pink))
   .home
   (m/Scaffold .appBar (m/AppBar .title (m/Text "List View")))
   .body (main-view)))
